#ifndef IR_CONTROL_H
#define IR_CONTROL_H

#include <utils.h>
#include "PinDefinitionsAndMore.h"
#include <IRremote.h>

const uint16_t SAMSUNG_ADDR = 0x707;
const uint8_t SAMSUNG_POWER = 0xE6;
const uint8_t SAMSUNG_HOME = 0x79;
const uint8_t SAMSUNG_BACK = 0x58;
const uint8_t SAMSUNG_ENTER = 0x68;
const uint8_t SAMSUNG_LEFT = 0x65;
const uint8_t SAMSUNG_RIGHT = 0x62;
const uint8_t SAMSUNG_UP = 0x60;
const uint8_t SAMSUNG_DOWN = 0x61;
const uint8_t SAMSUNG_VOL_UP = 0x7;
const uint8_t SAMSUNG_VOL_DOWN = 0xB;
const uint8_t SAMSUNG_STOP = 0x46;

// The following variables are automatically generated using IrScrutinizer 2.3.0 and Bomaker Ondine 1 Soundbar.rmdu (http://www.hifi-remote.com/forums/dload.php?action=file&file_id=25809)
// Prefixes I_ = intro signal and R_ = repeat signal
// Function [kHz] = Hz2kHz(Hz) convert frequency from hertz to kilohertz

typedef uint16_t MICROSECONDS_T;
typedef uint16_t FREQUENCY_T;
inline unsigned HZ_2_KHZ(FREQUENCY_T f) { return f / 1000U; }

const MICROSECONDS_T I_POWER[] PROGMEM = {9024U, 4512U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 39756};
const MICROSECONDS_T R_POWER[] PROGMEM = {9024U, 2256U, 564U, 65535U};
const MICROSECONDS_T I_BT[] PROGMEM = {9024U, 4512U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 39756};
const MICROSECONDS_T R_BT[] PROGMEM = {9024U, 2256U, 564U, 65535U};
const MICROSECONDS_T I_OPTICAL[] PROGMEM = {9024U, 4512U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 39756};
const MICROSECONDS_T R_OPTICAL[] PROGMEM = {9024U, 2256U, 564U, 65535U};
const MICROSECONDS_T I_UP[] PROGMEM = {9024U, 4512U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 39756};
const MICROSECONDS_T R_UP[] PROGMEM = {9024U, 2256U, 564U, 65535U};
const MICROSECONDS_T I_DOWN[] PROGMEM = {9024U, 4512U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 39756};
const MICROSECONDS_T R_DOWN[] PROGMEM = {9024U, 2256U, 564U, 65535U};
const MICROSECONDS_T I_MUTE[] PROGMEM = { 9024U, 4512U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 39756 };
const MICROSECONDS_T R_MUTE[] PROGMEM = { 9024U, 2256U, 564U, 65535U };
const MICROSECONDS_T I_RESET[] PROGMEM = { 9024U, 4512U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 39756 };
const MICROSECONDS_T R_RESET[] PROGMEM = { 9024U, 2256U, 564U, 65535U };
void sendRaw(const MICROSECONDS_T intro[], size_t lengthIntro, const MICROSECONDS_T repeat[], size_t lengthRepeat, FREQUENCY_T frequency, unsigned times);
void PowerSoundBar();
void SoundBarControl();
void SoundBarInput();
void PowerTv();;
void TvSoundInput();
void TvControl();

bool soundBarPowerSwitch = false;
bool opticalBluetoothSwitch = false;

#endif
// This Arduino sketch was automatically generated by IrScrutinizer 2.3.0 using Bomaker Ondine 1 Soundbar.rmdu (http://www.hifi-remote.com/forums/dload.php?action=file&file_id=25809)
#include <Arduino.h>
#include "PinDefinitionsAndMore.h" //required
#include <IRremote.h>
#include <SoftwareSerial.h>

const int soundBarPowerPin = 12;
const int potentiometerPin = A5;
const int backButtonPin = A2;
const int changeSoundInputPin = A3;
const int volOvPin = 11;
const int redLedPin = 13;
const int opticalPin = 10;
const int tvPowerPin = 9;
const int scrollPin = 6;
const int blueLedPin = 5;
const int joystickRxPin = A0;
const int joystickRyPin = A1;
const int joystickButtonPin = 2;
const int joystickThreshold = 50;
const unsigned long keepAliveTimeout = 4999;

int soundBarPowerPinState = 0;
int tvPowerPinState = 0;
int volumeValue = 0;
int volumeLevel = 1;
int volumeTracker = 1;
int volOvPinState = 0;
int opticalPinState = 0;
int scrollPinState = 0;
int backButtonPinState = 0;
int changeSoundInputPinState = 0;
unsigned long timeValue = 0;

SoftwareSerial esp8266(8, 7);
String output = "";
String tcpDataInOutput = "";
String tcpDataInSendLength = "";
String joystickOutput = "";
String joystickSendLength = "";
String keepAliveOutput = "";
String keepAliveSendLength = "";
String dataOutResult = "";
String dataInResponse = "";
String dataOutResponse = "";
int xPosition = 0;
int yPosition = 0;
int joystickPinState = 0;
int mapX = 0;
int mapY = 0;

bool soundBarPowerSwitch = false;
bool tvPowerSwitch = false;
bool inputSourceSwitch = false;
bool volumeFirstRead = true;
bool clientConnected = false;
bool esp8266Init = false;

typedef uint16_t microseconds_t; 
typedef uint16_t frequency_t;   

static inline unsigned hz2khz(frequency_t f) { return f / 1000U; }

const microseconds_t intro_Power[] PROGMEM = { 9024U, 4512U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 39756 };
const microseconds_t repeat_Power[] PROGMEM = { 9024U, 2256U, 564U, 65535U };
const microseconds_t intro_BT[] PROGMEM = { 9024U, 4512U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 39756 };
const microseconds_t repeat_BT[] PROGMEM = { 9024U, 2256U, 564U, 65535U };
const microseconds_t intro_Optical[] PROGMEM = { 9024U, 4512U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 39756 };
const microseconds_t repeat_Optical[] PROGMEM = { 9024U, 2256U, 564U, 65535U };
const microseconds_t intro_up_arrow[] PROGMEM = { 9024U, 4512U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 39756 };
const microseconds_t repeat_up_arrow[] PROGMEM = { 9024U, 2256U, 564U, 65535U };
const microseconds_t intro_down_arrow[] PROGMEM = { 9024U, 4512U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 564U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 1692U, 564U, 39756 };
const microseconds_t repeat_down_arrow[] PROGMEM = { 9024U, 2256U, 564U, 65535U };

void setup() {
  Serial.begin(9600);
  Serial.println("Serial ready");

  pinMode(soundBarPowerPin, INPUT_PULLUP);
  pinMode(volOvPin, INPUT_PULLUP);
  pinMode(opticalPin, INPUT_PULLUP);
  pinMode(tvPowerPin, INPUT_PULLUP);
  pinMode(scrollPin, INPUT_PULLUP);
  pinMode(redLedPin, OUTPUT);
  pinMode(blueLedPin, OUTPUT);
  pinMode(joystickRxPin, INPUT);
  pinMode(joystickRyPin, INPUT);
  pinMode(joystickButtonPin, INPUT_PULLUP);
  pinMode(backButtonPin, INPUT_PULLUP);
  pinMode(changeSoundInputPin, INPUT_PULLUP);

  IrSender.begin(IR_SEND_PIN, DISABLE_LED_FEEDBACK);
  IrSender.enableIROut(38);
  Serial.println("Infared ready");
  digitalWrite(redLedPin, HIGH);
}

void loop() {
  timeValue = millis();
  
  while ((timeValue + keepAliveTimeout) > millis()) {
    InnerLoop();
  }
  
  if (clientConnected) {
    keepAliveOutput = "ka\r\n";
    keepAliveSendLength = "AT+CIPSEND=0," + String(keepAliveOutput.length()) + "\r\n";
    TcpDataOut(keepAliveSendLength, 10);
    TcpDataOut(keepAliveOutput, 100);
    Serial.print("Send keep alive. ");
    Serial.println("timeValue: " + String(timeValue) + " + keepAliveTimeout: " + String(timeValue + keepAliveTimeout));
  } else {
    Serial.print("Keep alive no client. ");
    Serial.println("timeValue: " + String(timeValue) + " + keepAliveTimeout: " + String(timeValue + keepAliveTimeout));
  }
}

void InnerLoop() {
  soundBarPowerPinState = digitalRead(soundBarPowerPin);
  if (soundBarPowerSwitch) {
    if (soundBarPowerPinState == LOW) {
      Serial.println("Power off sound bar");
      digitalWrite(redLedPin, LOW);
      sendRaw(intro_Power, 68U, repeat_Power, 4U, 38400U, 12);
      soundBarPowerSwitch = false;
      delay(250);
    }
  } else {
    if (soundBarPowerPinState == LOW) {
      Serial.println("Power on sound bar");
      digitalWrite(redLedPin, LOW);
      sendRaw(intro_Power, 68U, repeat_Power, 4U, 38400U, 1);
      soundBarPowerSwitch = true;
      delay(250);
    }
  }

  volumeValue = analogRead(potentiometerPin);
  volumeLevel = volumeValue / 64;
  if (volumeFirstRead) {
    volumeTracker = volumeLevel;
    volumeFirstRead = false;
  }

  if (volumeLevel != volumeTracker) {
    if (volumeLevel < volumeTracker) {
      Serial.print("Volume down: ");
      Serial.print(volumeValue);
      Serial.print("  ");
      Serial.println(volumeLevel);
      digitalWrite(redLedPin, LOW);
      sendRaw(intro_down_arrow, 68U, repeat_down_arrow, 4U, 38400U, 1);
      volumeTracker = volumeLevel;
    } else {
      Serial.print("Volume up: ");
      Serial.print(volumeValue);
      Serial.print("  ");
      Serial.println(volumeLevel);
      digitalWrite(redLedPin, LOW);
      sendRaw(intro_up_arrow, 68U, repeat_up_arrow, 4U, 38400U, 1);
      volumeTracker = volumeLevel;
    }
    delay(250);
  }

  volOvPinState = digitalRead(volOvPin);
  if (volOvPinState == LOW) {
    if (volumeLevel < 7) {
      Serial.println("Volume down (override)");
      digitalWrite(redLedPin, LOW);
      sendRaw(intro_down_arrow, 68U, repeat_down_arrow, 4U, 38400U, 1);
    } else {
      Serial.println("Volume up (override)");
      digitalWrite(redLedPin, LOW);
      sendRaw(intro_up_arrow, 68U, repeat_up_arrow, 4U, 38400U, 1);
    }
    delay(250);
  }

  opticalPinState = digitalRead(opticalPin);
  if (inputSourceSwitch) {
    if (opticalPinState == LOW) {
      Serial.println("Bluetooth");
      digitalWrite(redLedPin, LOW);
      sendRaw(intro_BT, 68U, repeat_BT, 4U, 38400U, 1);
      inputSourceSwitch = false;
      delay(250);
    }
  } else {
    if (opticalPinState == LOW) {
      Serial.println("Optical");
      digitalWrite(redLedPin, LOW);
      sendRaw(intro_Optical, 68U, repeat_Optical, 4U, 38400U, 1);
      inputSourceSwitch = true;
      delay(250);
    }
  }

  tvPowerPinState = digitalRead(tvPowerPin);
  if (tvPowerPinState == LOW) {
    Serial.println("Power tv");
    digitalWrite(redLedPin, LOW);
    IrSender.sendSamsung(0x707, 0xE6, 0, false);
    delay(250);
  }

  changeSoundInputPinState = digitalRead(changeSoundInputPin);
  if (changeSoundInputPinState == LOW) {
    Serial.println("Change sound input");
    ChangeSoundInput();
    delay(250);
  }

  xPosition = analogRead(joystickRxPin);
  yPosition = analogRead(joystickRyPin);
  joystickPinState = digitalRead(joystickButtonPin);
  mapX = map(xPosition, 0, 1023, -512, 512);
  mapY = map(yPosition, 0, 1023, -512, 512);
  scrollPinState = digitalRead(scrollPin);
  backButtonPinState = digitalRead(backButtonPin);

  if ((backButtonPinState == 0 || joystickPinState == 0 || mapX > joystickThreshold || mapX < -joystickThreshold || mapY > joystickThreshold || mapY < -joystickThreshold) && !esp8266Init) {
    if (backButtonPinState == 0) {
      Serial.println("home");
      digitalWrite(redLedPin, LOW);
      IrSender.sendSamsung(0x707, 0x79, 0, false);
    } else if (joystickPinState == 0) {
      Serial.println("enter");
      digitalWrite(redLedPin, LOW);
      IrSender.sendSamsung(0x707, 0x68, 0, false);
    } else if (mapX > joystickThreshold) {
      Serial.println("left");
      digitalWrite(redLedPin, LOW);
      IrSender.sendSamsung(0x707, 0x65, 0, false);
    } else if (mapX < -joystickThreshold) {
      Serial.println("right");
      digitalWrite(redLedPin, LOW);
      IrSender.sendSamsung(0x707, 0x62, 0, false);
    } else if (mapY > joystickThreshold) {
      Serial.println("up");
      digitalWrite(redLedPin, LOW);
      IrSender.sendSamsung(0x707, 0x60, 0, false);
    } else if (mapY < -joystickThreshold) {
      Serial.println("down");
      digitalWrite(redLedPin, LOW);
      IrSender.sendSamsung(0x707, 0x61, 0, false);
    }
    delay(250);
  }

  if ((joystickPinState == 0 || scrollPinState == 0 || mapX > joystickThreshold || mapX < -joystickThreshold || mapY > joystickThreshold || mapY < -joystickThreshold) && clientConnected) {
    joystickOutput = String(mapX) + "," + String(mapY) + "," + String(joystickPinState) + "," + String(scrollPinState) + "\r\n";
    joystickSendLength = "AT+CIPSEND=0," + String(joystickOutput.length()) + "\r\n";
    TcpDataOut(joystickSendLength, 10);
    TcpDataOut(joystickOutput, 100);
    Serial.print(joystickOutput);
    digitalWrite(blueLedPin, LOW);
  }

  if (scrollPinState == 0 && !esp8266Init) {
    esp8266.begin(9600);
    Serial.println("Starting esp8266...");
    InitializeEsp8266();
    esp8266Init = true;
    Serial.println("Esp8266 ready");
  }

  if (esp8266Init) {
    TcpDataIn(50);
  }
  digitalWrite(redLedPin, HIGH);
  if (clientConnected) {
    digitalWrite(blueLedPin, HIGH);
  }
}

void ChangeSoundInput() {
  int _delay = 250;
  Serial.println("change sound input");
  IrSender.sendSamsung(0x707, 0x79, 0, false); //home
  Serial.println("home");
  delay(_delay);
  for(int i = 0; i < 16; i++) {
    IrSender.sendSamsung(0x707, 0x65, 0, false); //left
    Serial.println(String(i) + " left");
    delay(_delay);
  }
  IrSender.sendSamsung(0x707, 0x62, 0, false); //right
  Serial.println("right");
  delay(_delay);
  IrSender.sendSamsung(0x707, 0x60, 0, false); //up
  Serial.println("up");
  delay(_delay);
  for(int i = 0; i < 3; i++) {
    IrSender.sendSamsung(0x707, 0x62, 0, false); //right
    Serial.println(String(i) + " right");
    delay(_delay);    
  }
  IrSender.sendSamsung(0x707, 0x68, 0, false); //enter
  Serial.println("enter");
  delay(_delay);  
  IrSender.sendSamsung(0x707, 0x79, 0, false); //home
  Serial.println("home");
  delay(_delay);
}

static void sendRaw(const microseconds_t intro[], size_t lengthIntro, const microseconds_t repeat[], size_t lengthRepeat, frequency_t frequency, unsigned times) {
  if (lengthIntro > 0U) {
    IrSender.sendRaw_P(intro, lengthIntro, hz2khz(frequency));
  }
  if (lengthRepeat > 0U) {
    for (unsigned i = 0U; i < times - (lengthIntro > 0U); i++) {
      IrSender.sendRaw_P(repeat, lengthRepeat, hz2khz(frequency));
    }
  }
}

void InitializeEsp8266() {
  FlashBlueLed();
  TcpDataOut("AT+RST\r\n", 2100);
  FlashBlueLed();
  TcpDataOut("AT+CWMODE=1\r\n", 201);
  FlashBlueLed();
  dataOutResult = TcpDataOut("AT+CIFSR\r\n", 201);

  if (dataOutResult.indexOf("0.0") > 0) {
    Serial.println("Invalid IP");
    dataOutResult = TcpDataOut("AT+CWJAP=\"***REMOVED***\",\"***REMOVED***\"\r\n", 2100); //3200
    while (!esp8266.find("OK")) {
    }
    if (dataOutResult.indexOf("0.0") > 0) {
      Serial.println("Invalid IP after AT+CWJAP");
      ResetEsp8266();
      return;
    }
    Serial.println("Connected to wifi");
    TcpDataOut("AT+CIFSR\r\n", 201);
  }

  FlashBlueLed();
  TcpDataOut("AT+CIPMUX=1\r\n", 201); //enable multiple connections
  FlashBlueLed();
  TcpDataOut("AT+CIPSERVER=1,3000\r\n", 201);
  FlashBlueLed();
}

void ResetEsp8266() {
  BlinkBlueLed();
  Serial.println("Restarting esp8266...");
  InitializeEsp8266();
  Serial.println("Esp8266 ready");
  clientConnected = false;
}

void FlashBlueLed() {
  digitalWrite(blueLedPin, HIGH);
  delay(100);
  digitalWrite(blueLedPin, LOW);
}

void BlinkBlueLed() {
  digitalWrite(blueLedPin, LOW);
  delay(100);
  digitalWrite(blueLedPin, HIGH);
  delay(100);
  digitalWrite(blueLedPin, LOW);
  delay(100);
  digitalWrite(blueLedPin, HIGH);
  delay(100);
  digitalWrite(blueLedPin, LOW);
  delay(100);
  digitalWrite(blueLedPin, HIGH);
  delay(100);
  digitalWrite(blueLedPin, LOW);
  delay(100);
  digitalWrite(blueLedPin, HIGH);
  delay(100);
  digitalWrite(blueLedPin, LOW);
}

void TcpDataIn(const int timeout) {
  dataInResponse = "";
  long int time = millis();
  while ((time + timeout) > millis()) {
    while (esp8266.available()) {
      char c = esp8266.read();
      dataInResponse += c;
    }
  }
  
  if (dataInResponse.length() == 0) {
    if (!clientConnected) {
      FlashBlueLed();
    }
    return;
  }
  
  Serial.println("received: " + dataInResponse);
  if (dataInResponse.indexOf("zzzz") > 0 || dataInResponse.indexOf("zzz") > 0 ||
      dataInResponse.indexOf("zz") > 0 || dataInResponse.indexOf("z") > 0) {

    clientConnected = true;
    Serial.println("Client connected");
    tcpDataInOutput = "initack\r\n";
    tcpDataInSendLength = "AT+CIPSEND=0," + String(tcpDataInOutput.length()) + "\r\n";
    TcpDataOut(tcpDataInSendLength, 10);
    TcpDataOut(tcpDataInOutput, 100);
    clientConnected = true;
    return;
  }

  if (dataInResponse.indexOf("nlink") > 0) {
    Serial.println("Unlink detected");
    clientConnected = false;
    return;
  }
}

String TcpDataOut(String command, const int timeout) {
  dataOutResponse = "";
  esp8266.print(command);
  long int time = millis();
  while ((time + timeout) > millis()) {
    while (esp8266.available()) {
      char c = esp8266.read();
      dataOutResponse += c;
    }
  }

  if (dataOutResponse.indexOf("link is not") > 0) {
    Serial.println("Client disconnect tcp data out");
    clientConnected = false;
    return;
  }

  if (dataOutResponse.indexOf("Error") > 0) {
    Serial.println("Error in TcpDataOut");
    ResetEsp8266();
  }
  Serial.println(dataOutResponse);
  return dataOutResponse;
}
